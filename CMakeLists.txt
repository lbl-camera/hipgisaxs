
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(HipGISAXS)
SET(HipGISAXS_VERSION_MAJOR 2)
SET(HipGISAXS_VERSION_MINOR 0)

# force out-of-source builds
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt." )
ENDIF()


# custom modules
#LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

# add c++11 for pre GCC 6. compilers
#IF (CMAKE_COMPILER_IS_GNUCC AND  NOT CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6)
SET(CMAKE_CXX_FLAGS "-std=c++11")
#ENDIF()

# add option to do double precision
OPTION(DOUBLE_PRECISION "Use double precision arithmatic" OFF)
IF(DOUBLE_PRECISION)
    ADD_DEFINITIONS(-DDOUBLEP)
ENDIF(DOUBLE_PRECISION)

# boost
FIND_PACKAGE(Boost COMPONENTS system filesystem chrono timer)
IF (Boost_FOUND)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
    SET(LIBS ${Boost_LIBRARIES})
ENDIF()

# find CPP-YAML
FIND_PACKAGE(yaml-cpp REQUIRED)
IF (yaml-cpp_FOUND)
    INCLUDE_DIRECTORIES(${yaml-cpp_INCLUDE_DIR})
    SET(LIBS ${LIBS} -lyaml-cpp)
ENDIF (yaml-cpp_FOUND)

# FFTW Library
#FIND_LIBRARY(FFTW NAMES fftw3 "/usr/lib/x86_64-linux-gnu/")
#IF (FFTW)
#    SET(LIBS ${LIBS} ${FFTW})
#ELSE(FFTW)
#    MESSAGE(FATAL_ERROR  "FFTW3 not found")
#ENDIF(FFTW)

# TIFF
FIND_PACKAGE(TIFF)
IF(TIFF_FOUND)
    SET(LIBS ${LIBS} ${TIFF_LIBRARIES})
ENDIF(TIFF_FOUND)


OPTION(USE_HD5 "Use hdf5 data-format for shape definitions" OFF)
IF (USE_HD5)
    FIND_PACKAGE(HDF5)
    IF (HDF5_FOUND)
        ADD_DEFINITIONS(-DUSE_HDF5)
        SET(LIBS ${LIBS} ${HDF5_LIBRARIES})
        INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
        ADD_DEFINITIONS(-DUSE_HDF5)
    ENDIF (HDF5_FOUND)
ENDIF(USE_HD5)

# CUDA
IF (APPLE)
	OPTION(USE_CUDA "Use nvidia GPUs for acceleration" FALSE)
ELSE (APPLE)
	OPTION(USE_CUDA "Use nvidia GPUs for acceleration" TRUE)
ENDIF (APPLE)
FIND_PACKAGE(CUDA)
IF(USE_CUDA AND CUDA_FOUND)
    SET(CUDA_SEPARABLE_COMPILATION TRUE)
    ADD_DEFINITIONS(-DUSE_GPU -DFF_ANA_GPU -DFF_NUM_GPU -DKERNEL2)
    ADD_SUBDIRECTORY(src/ff/gpu)
    ADD_SUBDIRECTORY(src/sf/gpu)
ENDIF (USE_CUDA AND CUDA_FOUND)


#OPENMP
FIND_PACKAGE(OpenMP)
IF (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF(OPENMP_FOUND)

#MPI
OPTION(USE_MPI "Build with MPI" OFF)
IF(USE_MPI)
    FIND_PACKAGE(MPI)
    IF (MPI_CXX_FOUND)
        INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})   
        SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${MPI_CXX_COMPILE_FLAGS})
        SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS})
        SET(LIBS ${LIBS} ${MPI_CXX_LIBRARIES})
        ADD_DEFINITIONS(-DUSE_MPI)
    ELSE (MPI_CXX_FOUND)
        MESSAGE(FATAL_ERROR "MPI Option selected, but MPI was not found")
    ENDIF (MPI_CXX_FOUND)
ENDIF(USE_MPI)

SET(hipgisaxs_SOURCE
    src/sim/hipgisaxs_sim.cpp
)
INCLUDE_DIRECTORIES(include)

IF (USE_CUDA)
    CUDA_ADD_EXECUTABLE(hipgisaxs ${hipgisaxs_SOURCE})
    TARGET_LINK_LIBRARIES(hipgisaxs ffgpu sfgpu ${CULIBS})
ELSE (USE_CUDA)
    ADD_EXECUTABLE(hipgisaxs ${hipgisaxs_SOURCE})
ENDIF(USE_CUDA)

ADD_SUBDIRECTORY(src)
TARGET_LINK_LIBRARIES(hipgisaxs ffcpu sfcpu ${LIBS})
INSTALL(TARGETS hipgisaxs DESTINATION ${CMAKE_SOURCE_DIR}/bin)
